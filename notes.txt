Use slater JS for rich text editor 


//Sending information from one page to another using react router 
//The sender 
import { useNavigate } from 'react-router-dom';
    const navigate = useNavigate(); 
    const goProductProfile = useCallback(() => navigate('../product_profile', {
        replace: true, 
        state: {
            id: ID, 
        }
    }), [navigate])

//The receiver
import { useLocation, useNavigate } from 'react-router-dom';

    const location = useLocation(); 
    const {
        id,
    } = location.state;


 reddit feed item with text are around 410px high 
 and 640px wide 


Converting firebase timestamp to javascript date 
https://thewebdev.info/2022/04/28/how-to-convert-a-firestore-date-or-timestamp-to-a-javascript-date/

To Do List Before Firestore is implemented 
1.)
components/RenderTimePosted
write the function 

To Do List once Firestore is implemented 
1.)
file(s): 
    feed/renderFeed.js
    helperTools/dummyDataj.s
Change the way all threads are distracted 

Code from renderThread.js
    const retrieveThread = async (ID) => {
        const docRef = doc(db, "Threads", ID)
        const docData = await getDoc(docRef)
            .catch(e => { console.log(`${e.code}: ${e.message}`)})
        if (docData.exists()) {
            setThreadData(docData.data())
        }
        else {
            console.log("This data doesn\'t exist")
        }
    }
    
    //function for processing voting data retrieved from Firebase
    const extractVoteData = () => {
        var upvotes = 0;
        var downvotes = 0; 
        threadData.votes.forEach(vote => {
            if (vote.upvote) {
                upvotes++; 
                //if the current vote is owned by the currently logged in user
                if (vote.userID == currentUserData.userID) {setUpvoted(true) }
            }
            if (vote.downvote) {
                downvotes++; 
                //if the current vote is owned by the currently logged in user
                if (vote.userID == currentUserData.userID) { setDownvoted(true)}
            }
           
        })

        setUpvoteNum(upvotes);
        setDownvoteNum(downvotes); 
    }

    
    useEffect(() => {
        if (threadID !== null || threadID !== undefined || threadID !== '') {
            retrieveThread(threadID)
           // setThreadData(threads.find(elem => elem.threadID === threadID))
        }
    }, [threadID])

        useEffect(() => {
        if (threadData !== null) {
            extractVoteData();
            //get relevent community data that the thread belongs to 
            setCommunityData(SampleCommunity.find(elem => elem.communityID === threadData.communityID))
        }
    }, [threadData])

        const {
        currentUserData,
    } = useContext(AppContext);

2.) 
files(s): 
    cardItem.js 
Need to decide how to retrieve the number of comments to be displayed on each card.
The ideal situation is to make a query request from firebase once from the root
component, then pass that information along to the lower components such 
as RenderCardItem.



3.) 
file(s): 
    renderThread.js 
 Need to incorporate firebase into the voting system.

 4.) /screens/community.js; 

 5.) /navBar/navBar.js; 
 Need to update ToHome function 


